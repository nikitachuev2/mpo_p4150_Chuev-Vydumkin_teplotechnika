@startuml

class Пользователь {
    - логин : String
    - пароль : String // Хэш пароля
    - координаты : String
    - списокПомещений : List<Помещение>
    - историяВнешнихТемператур : Map<Date, Double>
    --
    + создатьПользователя(логин : String, пароль : String, координаты : String) : void
    + удалитьПользователя() : void
    + изменитьЛогин(новыйЛогин : String) : void
    + изменитьПароль(новыйПароль : String) : void
    + добавитьПомещение(помещение : Помещение) : void
    + обновитьДанныеОПогоде(температура : Map<Date, Double>) : void
}

class Помещение {
    - idПользователя : UUID
    - площадь : double
    - площадьСтен : double
    - площадьОкон : double
    - idДатчикаТемпературы : UUID
    - idДатчикаПрисутствия : UUID
    - idПрибораУправленияТеплом : UUID
    - историяТемператур : Map<Date, Double>
    - расписание : Расписание
    --
    + обновитьИсториюТемпературы(время : Date, температура : double) : void
    + отправитьСигналНаПриборУправления() : void
    + заменитьДатчики(idДатчикаТемпературы : UUID, idДатчикаПрисутствия : UUID, idПрибораУправленияТеплом : UUID) : void
}

class Расписание {
    - температураСЛюдьми : double
    - температураБезЛюдей : double
    - расписаниеРежимов : Map<String, String> // ключ: день недели, значение: режим
    - текущийРежим : String
    --
    + изменитьТемпературыРежимов(температураСЛюдьми : double, температураБезЛюдей : double) : void
    + изменитьРасписание(расписаниеРежимов : Map<String, String>) : void
}

class ДатчикТемпературы {
    - idДатчикаТемпературы : UUID
    - текущаяТемпература : double
}

class ДатчикПрисутствия {
    - idДатчикаПрисутствия : UUID
    - режимПомещения : boolean // true - с людьми, false - без людей
}

class ДатчикУправленияТеплом {
    - idДатчикаУправленияТеплом : UUID
    - текущаяТемпература : double
}

// Связи
Пользователь "1" o-- "*" Помещение
Помещение "1" *-- "1" Расписание
Помещение "1" *-- "1" ДатчикТемпературы
Помещение "1" *-- "1" ДатчикПрисутствия
Помещение "1" *-- "1" ДатчикУправленияТеплом

@enduml

